#! /usr/bin/env python3.4
import math
from pprint import pprint as pp

class Point3D:

    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z

    def __str__(self):
        return ("({:.2f}, {:.2f}, {:.2f})".format(round(self.x,2), round(self.y,2), round(self.z,2)))

    def disFrom (self, other):
        return pow((pow((self.x-other.x),2) + pow((self.y-other.y),2) + pow((self.z-other.z),2)) , 0.5)

    def nearestPoint(self, points):
        if not points:
            return None
        else:
            mindis = float("inf")
            for point in points:
                dis = self.disFrom(point)
                if dis < mindis:
                    temp = point
            return temp

    def clone(self):
        return Point3D(self.x, self.y,self.z)

    def __add__(one, other):
        if isinstance(other, Point3D) and isinstance(one, Point3D):
            return Point3D(one.x + other.x, one.y + other.y, one.z + other.z)
        else:
            if isinstance(one, Point3D):
                return Point3D(one.x + other, one.y + other, one.z + other)
            else:
                return Point3D(one + other.x, one + other.y, one + other.z)

    def __sub__(self, other):
        if isinstance(other, Point3D):
            return Point3D(self.x + other.x, self.y + other.y, self.z + self.z)
